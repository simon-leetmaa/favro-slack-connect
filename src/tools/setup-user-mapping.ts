/**
 * Interactive setup tool for Favro-Slack user mapping
 * Run with: npx ts-node src/tools/setup-user-mapping.ts
 */
import { slackUserService } from '../services/slackUsers';
import * as dotenv from 'dotenv';
import * as fs from 'fs';
import * as path from 'path';
import * as readline from 'readline';

// Load environment variables
dotenv.config();

// Create readline interface for interactive input
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

/**
 * Prompts the user for input with a promise interface
 */
function question(query: string): Promise<string> {
  return new Promise((resolve) => {
    rl.question(query, resolve);
  });
}

async function setupUserMapping() {
  try {
    console.log('\nüöÄ Favro-Slack Integration: User Mapping Setup\n');
    console.log('Press Ctrl+C at any time to exit');
    
    // Check if SLACK_BOT_TOKEN is configured
    if (!process.env.SLACK_BOT_TOKEN) {
      console.log('‚ùå Error: SLACK_BOT_TOKEN not found in environment variables');
      console.log('   Please create a .env file with your Slack Bot Token before proceeding.');
      console.log('   You can copy .env.example to .env and fill in your token.');
      return;
    }
    
    console.log('\nüìä Fetching users from Slack workspace...');
    const users = await slackUserService.getAllUsers();
    
    if (users.length === 0) {
      console.log('‚ùå No users found or there was an issue with the Slack API token.');
      return;
    }
    
    console.log(`‚úÖ Found ${users.length} users in your Slack workspace\n`);
    
    // Display users in a table format
    console.log('ID                | Username      | Full Name                    | Email');
    console.log('------------------|---------------|------------------------------|------------------------');
    
    users.forEach(user => {
      const id = user.id || 'N/A';
      const name = user.name || 'N/A';
      const realName = user.real_name || 'N/A';
      const email = user.email || 'N/A';
      
      console.log(`${id.padEnd(18)} | ${name.padEnd(13)} | ${realName.padEnd(28)} | ${email}`);
    });
    
    console.log('\nüîÑ Creating user mappings from Slack to Favro');
    console.log('   For each Slack user, enter their Favro username');
    console.log('   Press Enter without typing to skip a user');
    console.log('   Type "done" to finish mapping\n');
    
    const userMappings: Record<string, string> = {};
    
    // Process each Slack user
    for (const user of users) {
      const slackId = user.id || '';
      const slackName = user.real_name || user.name || 'Unknown user';
      
      if (!slackId) continue;
      
      const favroUsername = await question(`Enter Favro username for Slack user "${slackName}" (${slackId}): `);
      
      // Allow skipping or ending the mapping
      if (!favroUsername) {
        console.log(`‚è≠Ô∏è  Skipped mapping for ${slackName}\n`);
        continue;
      }
      
      if (favroUsername.toLowerCase() === 'done') {
        console.log('\n‚úÖ Finishing user mapping setup\n');
        break;
      }
      
      userMappings[favroUsername] = slackId;
      console.log(`‚úÖ Mapped: ${favroUsername} ‚Üí ${slackId} (${slackName})\n`);
    }
    
    if (Object.keys(userMappings).length > 0) {
      // Create the mapping content
      const mappingContent = `/**
 * User mapping between Favro usernames and Slack user IDs
 * Generated by setup-user-mapping.ts on ${new Date().toISOString()}
 */
import { UserMapping } from '../types';

/**
 * Maps Favro usernames to Slack user IDs
 * Format: { 'favroUsername': 'slackUserId' }
 */
export const userMapping: UserMapping = ${JSON.stringify(userMappings, null, 2)};
`;

      // Prepare backup of current mapping if it exists
      const mappingPath = path.join(process.cwd(), 'src', 'config', 'userMapping.ts');
      if (fs.existsSync(mappingPath)) {
        const backupPath = mappingPath + '.backup.' + Date.now();
        fs.copyFileSync(mappingPath, backupPath);
        console.log(`üì¶ Backup of current mapping created at: ${backupPath}`);
      }

      // Write new mapping
      fs.writeFileSync(mappingPath, mappingContent);
      console.log(`\n‚ú® User mapping saved to: ${mappingPath}`);
      console.log(`   Added ${Object.keys(userMappings).length} user mappings`);
    } else {
      console.log('\n‚ö†Ô∏è No mappings were created.');
    }

    console.log('\nüìù Next Steps:');
    console.log('1. Build the application: npm run build');
    console.log('2. Start the server: npm start');
    console.log('3. Configure your Favro webhook to point to your server');

  } catch (error) {
    console.error('‚ùå Error setting up user mapping:', error);
  } finally {
    rl.close();
  }
}

// Run the setup function
setupUserMapping();
